class(cd114.1)
#**************** Paste Zero infront of Single Districts ****************
cd114.1$district_code <- as.character(cd114.1$DISTRICT)
cd114.1$district_code[cd114.1$district_code == 98] <- "01" #Account for the weird code for DC
cd114.1$district_code[cd114.1$district_code == 0] <- "01"  #Account for at large districts
cd114.1$district_code[cd114.1$district_code == 1] <- "01"
cd114.1$district_code[cd114.1$district_code == 2] <- "02"
cd114.1$district_code[cd114.1$district_code == 3] <- "03"
cd114.1$district_code[cd114.1$district_code == 4] <- "04"
cd114.1$district_code[cd114.1$district_code == 5] <- "05"
cd114.1$district_code[cd114.1$district_code == 6] <- "06"
cd114.1$district_code[cd114.1$district_code == 7] <- "07"
cd114.1$district_code[cd114.1$district_code == 8] <- "08"
cd114.1$district_code[cd114.1$district_code == 9] <- "09"
#************** Create CD in  Data ****************
cd114.1$CD <- paste(cd114.1$state.abb, cd114.1$district_code, sep = "")
class(cd114.1)
1:100
################ Create Fake Data To Simulate My Own ########################
CD <- unique(cd114.1$CD)
Values <- sample(1:100, 436, replace = T)
Df <- data.frame(CD, Values)
Df
################### Merge Shape File to Donor #####################
#******************** Merge Descriptive Stats *********************
Df.2 <- merge(cd114.1,Df, by = c("CD"), all.y = T)
class(Df.2)
Df.2
library(cartogram)
library(tmap)
library(maptools)
#> Loading required package: sp
#> Checking rgeos availability: TRUE
data(wrld_simpl)
# keep only the african continent
afr <- wrld_simpl[wrld_simpl$REGION == 2, ]
# project the map
afr <- spTransform(afr, CRS("+init=epsg:3395"))
class(afr)
################### Make SP Object ####################
Df.3 <- sp::as_Spatial(Df.2)
################### Make SP Object ####################
Df.3 <- as_Spatial(Df.2)
Df.2$geometry
Df.3 = Df.2[!st_is_empty(Df.2),,drop=FALSE]
Df.3
################### Make SP Object ####################
Df.4 <- as_Spatial(Df.3)
class(Df.4)
data(wrld_simpl)
# keep only the african continent
afr <- wrld_simpl[wrld_simpl$REGION == 2, ]
# project the map
afr <- spTransform(afr, CRS("+init=epsg:3395"))
afr
Df.4
# construct cartogram
Df.5 <- cartogram_cont(Df.4, "Values", itermax = 5)
###################  project the map ####################
Df.5 <- spTransform(Df.4, CRS("+init=epsg:3395"))
Df.5
# construct cartogram
Df.5 <- cartogram_cont(Df.4, "Values", itermax = 5)
Df.4
###################  project the map ####################
Df.5 <- spTransform(Df.4, crs = 3857)
###################  project the map ####################
Df.5 <- spTransform(Df.4, crs = CRS("+init=epsg:3857"))
# project the map
afr <- spTransform(afr, CRS("+init=epsg:3395"))
###################  project the map ####################
Df.5 <- spTransform(Df.5, CRS("+init=epsg:3395"))
###################  project the map ####################
Df.5 <- spTransform(Df.5, CRS("+init=epsg:3857"))
###################  project the map ####################
Df.5 <- spTransform(Df.4, CRS("+init=epsg:3857"))
Df.5
# construct cartogram
Df.5 <- cartogram_cont(Df.5, "Values", itermax = 5)
# plot it
tm_shape(Df.5) + tm_polygons("POP2005", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
# plot it
tm_shape(Df.5) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
Df.5
colnames(Df.3)
#Sharif Amlani
#R 4.0.3
#Winter 2021
######################## Code Summary ##################
#https://cran.r-project.org/web/packages/cartogram/readme/README.html
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
'%!in%' <- function(x,y)!('%in%'(x,y))
get_congress_map <- function(cong=113) {
tmp_file <- tempfile()
tmp_dir  <- tempdir()
zp <- sprintf("http://cdmaps.polisci.ucla.edu/shp/districts%03i.zip",cong)
download.file(zp, tmp_file)
unzip(zipfile = tmp_file, exdir = tmp_dir)
fpath <- paste(tmp_dir, sprintf("districtShapes/districts%03i.shp",cong), sep = "/")
st_read(fpath)
}
######################### Library #####################
library(sf)
library(sp)
library(tmap)
library(cartogram)
library(ggplot2)
library(ggmap)
library(maptools)
###################### Upload Data ###################
cd114 <- get_congress_map(114)
################ Create Congressional District ID ###################
State_Dictonary <- rbind(data.frame(state.abb, STATENAME= state.name), data.frame(state.abb= "DC", STATENAME= "District Of Columbia"))
#Add DC
cd114.1 <- merge(cd114, State_Dictonary, by = c("STATENAME"))
class(cd114.1)
#**************** Paste Zero infront of Single Districts ****************
cd114.1$district_code <- as.character(cd114.1$DISTRICT)
cd114.1$district_code[cd114.1$district_code == 98] <- "01" #Account for the weird code for DC
cd114.1$district_code[cd114.1$district_code == 0] <- "01"  #Account for at large districts
cd114.1$district_code[cd114.1$district_code == 1] <- "01"
cd114.1$district_code[cd114.1$district_code == 2] <- "02"
cd114.1$district_code[cd114.1$district_code == 3] <- "03"
cd114.1$district_code[cd114.1$district_code == 4] <- "04"
cd114.1$district_code[cd114.1$district_code == 5] <- "05"
cd114.1$district_code[cd114.1$district_code == 6] <- "06"
cd114.1$district_code[cd114.1$district_code == 7] <- "07"
cd114.1$district_code[cd114.1$district_code == 8] <- "08"
cd114.1$district_code[cd114.1$district_code == 9] <- "09"
#************** Create CD in  Data ****************
cd114.1$CD <- paste(cd114.1$state.abb, cd114.1$district_code, sep = "")
################ Create Fake Data To Simulate My Own ########################
CD <- unique(cd114.1$CD)
Values <- sample(1:100, 436, replace = T)
Df <- data.frame(CD, Values)
################### Merge Shape File to Donor #####################
#******************** Merge Descriptive Stats *********************
Df.2 <- merge(cd114.1,Df, by = c("CD"), all.y = T)
class(Df.2)
################### Drop Empty Geometries ####################
Df.3 <- Df.2[!st_is_empty(Df.2),,drop=FALSE]
################### Drop AK & HI ####################
Df.4 <- Df.3[Df.3$state.abb %!in% c("AK", "HI"), ]
################### Make SP Object ####################
Df.5 <- as_Spatial(Df.4)
class(Df.5)
###################  project the map ####################
Df.6 <- spTransform(Df.5, CRS("+init=epsg:3857"))
# construct cartogram
Df.7 <- cartogram_cont(Df.6, "Values", itermax = 1)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
library(cartogram)
library(tmap)
library(maptools)
#> Loading required package: sp
#> Checking rgeos availability: TRUE
data(wrld_simpl)
# keep only the african continent
afr <- wrld_simpl[wrld_simpl$REGION == 2, ]
# project the map
afr <- spTransform(afr, CRS("+init=epsg:3395"))
# construct cartogram
afr_cont <- cartogram_cont(afr, "POP2005", itermax = 5)
#> Warning in CPL_crs_from_proj4string(x): GDAL Message 1: +init=epsg:XXXX syntax
#> is deprecated. It might return a CRS with a non-EPSG compliant axis order.
#> Mean size error for iteration 1: 5.79457153280442
#> Mean size error for iteration 2: 4.94825547349441
#> Mean size error for iteration 3: 4.32626995057149
#> Mean size error for iteration 4: 3.84940324694301
#> Mean size error for iteration 5: 3.45917774259599
# plot it
tm_shape(afr_cont) + tm_polygons("POP2005", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
library(cartogram)
library(tmap)
library(maptools)
#> Loading required package: sp
#> Checking rgeos availability: TRUE
data(wrld_simpl)
# keep only the african continent
afr <- wrld_simpl[wrld_simpl$REGION == 2, ]
# project the map
afr <- spTransform(afr, CRS("+init=epsg:3395"))
# construct cartogram
afr_cont <- cartogram_cont(afr, "POP2005", itermax = 5)
#> Warning in CPL_crs_from_proj4string(x): GDAL Message 1: +init=epsg:XXXX syntax
#> is deprecated. It might return a CRS with a non-EPSG compliant axis order.
#> Mean size error for iteration 1: 5.79457153280442
#> Mean size error for iteration 2: 4.94825547349441
#> Mean size error for iteration 3: 4.32626995057149
#> Mean size error for iteration 4: 3.84940324694301
#> Mean size error for iteration 5: 3.45917774259599
# plot it
tm_shape(afr_cont) + tm_polygons("POP2005", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
#Sharif Amlani
#R 4.0.3
#Winter 2021
######################## Code Summary ##################
#https://cran.r-project.org/web/packages/cartogram/readme/README.html
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
'%!in%' <- function(x,y)!('%in%'(x,y))
get_congress_map <- function(cong=113) {
tmp_file <- tempfile()
tmp_dir  <- tempdir()
zp <- sprintf("http://cdmaps.polisci.ucla.edu/shp/districts%03i.zip",cong)
download.file(zp, tmp_file)
unzip(zipfile = tmp_file, exdir = tmp_dir)
fpath <- paste(tmp_dir, sprintf("districtShapes/districts%03i.shp",cong), sep = "/")
st_read(fpath)
}
######################### Library #####################
library(sf)
library(sp)
library(tmap)
library(cartogram)
library(ggplot2)
library(ggmap)
library(maptools)
###################### Upload Data ###################
cd114 <- get_congress_map(114)
################ Create Congressional District ID ###################
State_Dictonary <- rbind(data.frame(state.abb, STATENAME= state.name), data.frame(state.abb= "DC", STATENAME= "District Of Columbia"))
#Add DC
cd114.1 <- merge(cd114, State_Dictonary, by = c("STATENAME"))
class(cd114.1)
#**************** Paste Zero infront of Single Districts ****************
cd114.1$district_code <- as.character(cd114.1$DISTRICT)
cd114.1$district_code[cd114.1$district_code == 98] <- "01" #Account for the weird code for DC
cd114.1$district_code[cd114.1$district_code == 0] <- "01"  #Account for at large districts
cd114.1$district_code[cd114.1$district_code == 1] <- "01"
cd114.1$district_code[cd114.1$district_code == 2] <- "02"
cd114.1$district_code[cd114.1$district_code == 3] <- "03"
cd114.1$district_code[cd114.1$district_code == 4] <- "04"
cd114.1$district_code[cd114.1$district_code == 5] <- "05"
cd114.1$district_code[cd114.1$district_code == 6] <- "06"
cd114.1$district_code[cd114.1$district_code == 7] <- "07"
cd114.1$district_code[cd114.1$district_code == 8] <- "08"
cd114.1$district_code[cd114.1$district_code == 9] <- "09"
#************** Create CD in  Data ****************
cd114.1$CD <- paste(cd114.1$state.abb, cd114.1$district_code, sep = "")
################ Create Fake Data To Simulate My Own ########################
CD <- unique(cd114.1$CD)
Values <- sample(1:100, 436, replace = T)
Df <- data.frame(CD, Values)
################### Merge Shape File to Donor #####################
#******************** Merge Descriptive Stats *********************
Df.2 <- merge(cd114.1,Df, by = c("CD"), all.y = T)
class(Df.2)
################### Drop Empty Geometries ####################
Df.3 <- Df.2[!st_is_empty(Df.2),,drop=FALSE]
################### Drop AK & HI ####################
Df.4 <- Df.3[Df.3$state.abb %!in% c("AK", "HI"), ]
################### Make SP Object ####################
Df.5 <- as_Spatial(Df.4)
class(Df.5)
###################  project the map ####################
Df.6 <- spTransform(Df.5, CRS("+init=epsg:3857"))
# construct cartogram
Df.7 <- cartogram_cont(Df.6, "Values", itermax = 1)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
Df.6.1 = Df.6[ Df.6$STATENAME == "Wisconsin", ]
# construct cartogram
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 1)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
Df.6.1 = Df.6[ Df.6$STATENAME == "Wisconsin", ]
# construct cartogram
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 2)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
Df.6.1 = Df.6[ Df.6$STATENAME == "Wisconsin", ]
# construct cartogram
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 20)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
Df.6.1 = Df.6[ Df.6$STATENAME == "Wisconsin", ]
# construct cartogram
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 15)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
###################  construct cartogram  ####################
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 7)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
###################  construct cartogram  ####################
Df.7 <- cartogram_cont(Df.6.1, "Values", itermax = 5)
###################  Plot ####################
tm_shape(Df.7) + tm_polygons("Values", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "bottom"))
4,411.44 *3
4411.44 *3
devtools::install_github("mbjoseph/bbr")
library(bbr)
ninetyone <- get_season(1991)
str(ninetyone)
View(ninetyone)
#Sharif Amlani
#R 4.1.1
#Winter 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
'%!in%' <- function(x,y)!('%in%'(x,y))
#Turns a Regression into a data frame
Model.DF <- function(Model, Robust.SE = NULL) {
#Extract Coefficients
Model.Output <- as.data.frame(coef(summary(Model)))
Model.Output$Label <- rownames(Model.Output)
rownames(Model.Output) <- NULL
#Generate Confidence Intervals
CI <- as.data.frame(confint(Model, variable.names(Model), level=0.95))
CI$Label <- rownames(CI)
rownames(CI) <- NULL
#Merge Model and CIs together
Model.Output.Final <- merge(x = Model.Output, y = CI, by =c("Label"))
#Name the columns numeric
colnames(Model.Output.Final) <- c("Label", "Coeff", "SE", "t.value", "P.Value", "lower", "upper")
Model.Output.Final$Sig.05 <- ifelse(Model.Output.Final$P.Value <= .05, 1,0)
Model.Output.Final$Sig.10 <- ifelse(Model.Output.Final$P.Value <= .10, 1,0)
#Adjusted R Squared
Model.Output.Final$AdJ.R2 <- summary(Model)$adj.r.squared
#Dependent Variable
Model.Output.Final$DV <- all.vars(formula(Model))[1]
#Check for NA's in Model
for(n in names(coef(Model))){
if(is.na(Model$coefficients[[n]]) == T){
newRow <- data.frame(Label=n,
Coeff = NA,
SE = NA,
t.value = NA,
P.Value = NA,
lower = NA,
upper = NA,
AdJ.R2 = NA,
Sig.05 = NA,
Sig.10 = NA,
DV=all.vars(formula(Model))[1])
Model.Output.Final <- rbind(Model.Output.Final, newRow)
}
}
#Option for Robust Standard Errors
if(is.null(Robust.SE) == F){
library(sandwich)
x<- coeftest(Model, vcov = sandwich::vcovHC(Model, type=Robust.SE))
xr<- setNames(data.frame(x[1:dim(x)[1], 2]), c("Robust Standard Errors"))
xr$Label<- rownames(xr); rownames(xr) <- NULL
Model.Output.Final <- merge(Model.Output.Final, xr, by = "Label")
}
return(Model.Output.Final)
}
######################### Library #####################
library(spotifyr)
library(lubridate)
library(tidyverse)
library(knitr)
library(margins)
library(ggridges)
######################## Upload API Key ##################
#Set Working Directory
setwd("C:/Users/Shari/OneDrive/R-Scripts/API/Spotify")
#Upload Data
load(file = "Spotify API Key.rda")
#################### Connect to Spotify API ##################
Sys.setenv(SPOTIFY_CLIENT_ID = clientID)
Sys.setenv(SPOTIFY_CLIENT_SECRET = clientSecret)
access_token <- get_spotify_access_token()
#################### Download Data ##################
Music.Pure <- get_artist_audio_features('jay z', include_groups = "appears_on"); Music.1 <- Music.Pure
#################### Examine Data ##################
head(Music.1)
unique(Music.1$track_name)
#################### Subset Data ##################
Music.2 <- subset(Music.1, album_type != "compilation")
#################### Get Album Artist Name ##################
Album.Final <- NULL
for(i in unique(Music.2$album_id)){
Album.1 <- get_albums(i)
Album_Artists<- Album.1[[2]][[1]][[3]]
Album.2 <- data.frame(Album_Artists, album_id = i)
Album.Final <- rbind(Album.Final, Album.2)
}
Album.Final
#################### Merge Back to Dre Albums ##################
Music.3 <- merge(Music.2, Album.Final, by = "album_id")
#################### Code Dre Songs ##################
Music.3$Feature <- "No"
Music.3$Feature[grepl( "jay z" , Music.3$track_name ) == T] <- "Yes"
#################### Create Edgelist Network ##################
Music.4 <- unique(with(Music.3, data.frame(artist_name, Album_Artists)))
#################### Create Network ##################
library(igraph)
network <- graph_from_data_frame(d=Music.4, directed=F)
plot(network)
#What are the nodes
V(network)
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1, edge.color="gray85"); Plot.1
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=0.9, edge.color="gray85"); Plot.1
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 700, 700)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1, edge.color="gray85"); Plot.1
dev.off()
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 800, 800)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1, edge.color="gray85")
dev.off()
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1, edge.color="gray85")
dev.off()
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.5, edge.color="gray85")
dev.off()
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
#################### Merge Back to Dre Albums ##################
Music.3 <- merge(Music.2, Album.Final, by = "album_id")
#################### Code Dre Songs ##################
Music.3$Feature <- "No"
Music.3$Feature[grepl( "jay z" , Music.3$track_name ) == T] <- "Yes"
Music.3$Album_Artists <-  gsub("\\s*\\([^\\)]+\\)","",as.character(Music.3$Album_Artists))
#################### Create Edgelist Network ##################
Music.4 <- unique(with(Music.3, data.frame(artist_name, Album_Artists)))
#################### Create Network ##################
library(igraph)
network <- graph_from_data_frame(d=Music.4, directed=F)
plot(network)
#What are the nodes
V(network)
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
Music.3$Album_Artists
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 900, 900)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
##################### Plot ########################
setwd("C:/Users/Shari/OneDrive/University of California, Davis/Research Projects/Spotify/Dr. Dre Network")
png("Figure 2.png", 1000, 1000)
plot(network, vertex.shape="none", vertex.label=V(network)$name,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray85")
dev.off()
